# delivery_system/model.py
import json
import csv
from datetime import datetime, timedelta
import random
from mesa import Model
from mesa.time import RandomActivation
from .agents import WarehouseAgent, StoreAgent, VehicleAgent
from .scheduler import DeliveryScheduler

# –í model.py –∏–∑–º–µ–Ω–∏–º –∫–ª–∞—Å—Å DeliveryModel


# –í model.py –¥–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –∏ –æ–±–Ω–æ–≤–∏–º step


class DeliveryModel(Model):
    def __init__(self, input_file: str):
        super().__init__()
        self.delivery_log = []

        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        self.current_time = datetime.strptime("09:00", "%H:%M")
        self.time_step = timedelta(minutes=15)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with open(input_file, "r", encoding="utf-8") as f:
            self.data = json.load(f)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self.init_agents()

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = DeliveryScheduler(self)
        self.scheduler.generate_schedule()

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        with open("data/simulation_log.txt", "w", encoding="utf-8") as f:
            f.write("–°–ò–°–¢–ï–ú–ê –î–û–°–¢–ê–í–ö–ò - –õ–û–ì –†–ê–ë–û–¢–´\n")
            f.write("=" * 80 + "\n\n")

    def write_to_log(self):
        """–ó–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª –ª–æ–≥–∞"""
        with open("data/simulation_log.txt", "a", encoding="utf-8") as f:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            f.write(f"\nüïí –í–†–ï–ú–Ø: {self.get_time_str()}\n")
            f.write("-" * 80 + "\n")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            f.write("\nüì¶ –°–û–°–¢–û–Ø–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–í:\n")
            for store in self.stores:
                f.write(f"\n  üè™ {store.name}:\n")
                # –ó–∞–ø–∞—Å—ã
                f.write("    –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã:\n")
                for product, amount in store.inventory.items():
                    required = store.product_requirements[product]
                    percentage = (amount / required * 100) if required > 0 else 0
                    status = (
                        "‚úÖ" if percentage >= 80 else "‚ö†Ô∏è" if percentage >= 30 else "‚ùó"
                    )
                    f.write(f"      ‚Ä¢ {product}: {amount}/{required} {status}\n")
                # –û–∫–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                f.write(
                    f"    –û–∫–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {', '.join(f'{start}:00-{end}:00' for start, end in store.delivery_windows)}\n"
                )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            f.write("\nüöö –°–û–°–¢–û–Ø–ù–ò–ï –¢–†–ê–ù–°–ü–û–†–¢–ê:\n")
            for vehicle in self.vehicles:
                status_text = {
                    "idle": "–æ–∂–∏–¥–∞–µ—Ç",
                    "en_route": "–≤ –ø—É—Ç–∏",
                    "returning": "–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è",
                }.get(vehicle.status, vehicle.status)

                load_info = (
                    ", ".join(
                        f"{product}: {amount}"
                        for product, amount in vehicle.current_load.items()
                    )
                    if vehicle.current_load
                    else "–ø—É—Å—Ç–æ"
                )

                destination_text = (
                    f" –∫ {vehicle.destination.name}" if vehicle.destination else ""
                )
                f.write(
                    f"  ‚Ä¢ –ú–∞—à–∏–Ω–∞ #{vehicle.unique_id}: {status_text}{destination_text}\n"
                )
                f.write(f"    –ó–∞–≥—Ä—É–∑–∫–∞: {load_info} (–º–∞–∫—Å–∏–º—É–º: {vehicle.capacity})\n")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            f.write("\nüì¶ –°–û–°–¢–û–Ø–ù–ò–ï –°–ö–õ–ê–î–ê:\n")
            for product, amount in self.warehouse.inventory.items():
                f.write(f"  ‚Ä¢ {product}: {amount}\n")

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            if self.warehouse.active_orders:
                f.write("\nüìã –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´:\n")
                for store_name, orders in self.warehouse.active_orders.items():
                    f.write(f"  ‚Ä¢ {store_name}: {orders}\n")

            f.write("\n" + "=" * 80 + "\n")

    def step(self):
        """–û–¥–∏–Ω —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–¥–∏–Ω —à–∞–≥
        self.current_time += self.time_step

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if self.current_time.hour >= 23 and self.current_time.minute >= 45:
            self.current_time = datetime.strptime("09:00", "%H:%M")

        print(f"\n–ú–æ–¥–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.get_time_str()}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º scheduler
        self.scheduler.step()
        self.simulate_events()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª–æ–≥
        self.write_to_log()

    def init_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞
        self.warehouse = WarehouseAgent(0, self, self.data["—Å–∫–ª–∞–¥"]["inventory"])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
        self.stores = []
        for store_data in self.data["stores"]:
            store = StoreAgent(
                store_data["id"],  # unique_id
                self,  # model
                store_data["delivery_windows"],  # delivery_windows
                store_data["product_requirements"],  # product_requirements
            )
            store.name = store_data["name"]
            self.stores.append(store)

            self.log_event(
                "store_status",
                store.name,
                "–ù–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω",
                f"–ù–∞—á–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {store_data['product_requirements']}",
                "initialized",
            )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        self.vehicles = []
        for vehicle_data in self.data["vehicles"]:
            vehicle = VehicleAgent(vehicle_data["id"], self, vehicle_data["capacity"])
            self.vehicles.append(vehicle)

            self.log_event(
                "vehicle_status",
                f"vehicle_{vehicle_data['id']}",
                "–ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞",
                f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {vehicle_data['capacity']}",
                "idle",
            )

    def get_time_str(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        return self.current_time.strftime("%H:%M")

    def simulate_events(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print(f"\n–°–∏–º—É–ª—è—Ü–∏—è –≤ {self.get_time_str()}")

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º step() –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        for store in self.stores:
            store.step()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –æ—Ç –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        for store in self.stores:
            needed_products = store.check_inventory_and_make_order()
            if needed_products:
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç {store.name}: {needed_products}")

                self.log_event(
                    "delivery_request",
                    store.name,
                    "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                    f"–ó–∞–∫–∞–∑–∞–Ω–æ: {needed_products}",
                    "pending",
                )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥
                self.warehouse.process_order(store, needed_products)

    def log_event(
        self, event_type: str, agent_id: str, event_desc: str, details: str, status: str
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        timestamp = self.get_time_str()
        self.delivery_log.append(
            {
                "timestamp": timestamp,
                "event_type": event_type,
                "agent_id": agent_id,
                "event_desc": event_desc,
                "details": details,
                "status": status,
            }
        )

    # –í model.py –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:

    def save_formatted_log(self, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        with open(filename, "w", encoding="utf-8") as f:
            f.write("–°–ò–°–¢–ï–ú–ê –î–û–°–¢–ê–í–ö–ò - –õ–û–ì –†–ê–ë–û–¢–´\n")
            f.write("=" * 80 + "\n\n")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            events_by_time = {}
            for event in self.delivery_log:
                time = event["timestamp"]
                if time not in events_by_time:
                    events_by_time[time] = []
                events_by_time[time].append(event)

            # –í—ã–≤–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            for time in sorted(events_by_time.keys()):
                f.write(f"\nüïí –í–†–ï–ú–Ø: {time}\n")
                f.write("-" * 80 + "\n")

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É
                store_events = []
                vehicle_events = []
                delivery_events = []
                other_events = []

                for event in events_by_time[time]:
                    if event["event_type"].startswith("store"):
                        store_events.append(event)
                    elif event["event_type"].startswith("vehicle"):
                        vehicle_events.append(event)
                    elif event["event_type"].startswith("delivery"):
                        delivery_events.append(event)
                    else:
                        other_events.append(event)

                # –í—ã–≤–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
                if store_events:
                    f.write("\nüì¶ –ú–ê–ì–ê–ó–ò–ù–´:\n")
                    for event in store_events:
                        f.write(f"  ‚Ä¢ {event['agent_id']}: {event['event_desc']}\n")
                        f.write(f"    {event['details']}\n")

                # –í—ã–≤–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                if vehicle_events:
                    f.write("\nüöö –¢–†–ê–ù–°–ü–û–†–¢:\n")
                    for event in vehicle_events:
                        f.write(
                            f"  ‚Ä¢ –ú–∞—à–∏–Ω–∞ {event['agent_id']}: {event['event_desc']}\n"
                        )
                        f.write(f"    {event['details']}\n")

                # –í—ã–≤–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫
                if delivery_events:
                    f.write("\nüîÑ –î–û–°–¢–ê–í–ö–ò:\n")
                    for event in delivery_events:
                        status_emoji = "‚úÖ" if event["status"] == "completed" else "‚è≥"
                        f.write(f"  ‚Ä¢ {status_emoji} {event['event_desc']}\n")
                        f.write(f"    {event['details']}\n")

                # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                if other_events:
                    f.write("\nüìù –ü–†–û–ß–ò–ï –°–û–ë–´–¢–ò–Ø:\n")
                    for event in other_events:
                        f.write(f"  ‚Ä¢ {event['event_desc']}\n")
                        f.write(f"    {event['details']}\n")

                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                f.write("\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:\n")
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
                for store in self.stores:
                    f.write(f"\n  üè™ {store.name}:\n")
                    f.write("    –ó–∞–ø–∞—Å—ã:\n")
                    for product, amount in store.inventory.items():
                        required = store.product_requirements[product]
                        percentage = (amount / required * 100) if required > 0 else 0
                        status = (
                            "‚úÖ"
                            if percentage >= 80
                            else "‚ö†Ô∏è" if percentage >= 30 else "‚ùó"
                        )
                        f.write(f"      ‚Ä¢ {product}: {amount}/{required} {status}\n")

                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                f.write("\n  üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n")
                for vehicle in self.vehicles:
                    status_text = {
                        "idle": "–æ–∂–∏–¥–∞–µ—Ç",
                        "en_route": "–≤ –ø—É—Ç–∏",
                        "returning": "–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è",
                    }.get(vehicle.status, vehicle.status)

                    destination = (
                        f" –∫ {vehicle.destination.name}" if vehicle.destination else ""
                    )
                    load = (
                        f" (–≥—Ä—É–∑: {vehicle.current_load})"
                        if vehicle.current_load
                        else ""
                    )

                    f.write(
                        f"      ‚Ä¢ –ú–∞—à–∏–Ω–∞ {vehicle.unique_id}: {status_text}{destination}{load}\n"
                    )

                f.write("\n" + "-" * 80 + "\n")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü
            f.write("\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
            f.write("=" * 80 + "\n")
            total_deliveries = len(
                [e for e in self.delivery_log if e["event_type"] == "delivery_complete"]
            )
            total_requests = len(
                [e for e in self.delivery_log if e["event_type"] == "delivery_request"]
            )
            f.write(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_requests}\n")
            f.write(f"–£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {total_deliveries}\n")

    def get_formatted_state(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ"""
        state = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        state.append("\n–ú–ê–ì–ê–ó–ò–ù–´:")
        for store in self.stores:
            store_info = [
                f"\n–ú–∞–≥–∞–∑–∏–Ω: {store.name}",
                f"–ó–∞–ø–∞—Å—ã/–¢—Ä–µ–±—É–µ–º—ã–µ: "
                + ", ".join(
                    f"{product}: {current}/{required}"
                    for product, current in store.inventory.items()
                    for required in [store.product_requirements[product]]
                ),
                f"–û–∫–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: "
                + ", ".join(
                    f"{start}:00-{end}:00" for start, end in store.delivery_windows
                ),
            ]
            state.extend(store_info)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
        state.append("\n–¢–†–ê–ù–°–ü–û–†–¢:")
        for vehicle in self.vehicles:
            status_text = {
                "idle": "–æ–∂–∏–¥–∞–µ—Ç",
                "en_route": "–≤ –ø—É—Ç–∏",
                "returning": "–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è",
            }.get(vehicle.status, vehicle.status)

            load_info = (
                ", ".join(
                    f"{product}: {amount}"
                    for product, amount in vehicle.current_load.items()
                )
                if vehicle.current_load
                else "–ø—É—Å—Ç–æ"
            )

            destination_text = (
                f"–∫ {vehicle.destination.name}" if vehicle.destination else ""
            )

            vehicle_info = [
                f"\n–ú–∞—à–∏–Ω–∞ #{vehicle.unique_id}",
                f"–°—Ç–∞—Ç—É—Å: {status_text} {destination_text}",
                f"–ó–∞–≥—Ä—É–∑–∫–∞: {load_info} (–º–∞–∫—Å–∏–º—É–º: {vehicle.capacity})",
            ]
            state.extend(vehicle_info)

        return "\n".join(state)
